pathQ <- function(maze, startPoint, endRegion){
direction <- list(x = c(-1,1,0,0), y = c(0,0,-1,1))
track_path <- d0
move_line_x <- c()
move_line_y <- c()
m <- dim(d0)[1]
n <- dim(d0)[2]
u <- startPoint$x
v <- startPoint$y
track_path[u,v] <- FALSE
move_line_x <- c(move_line_x, u)
move_line_y <- c(move_line_y, v)
while (length(move_line_x) > 0){
u <- move_line_x[1]
v <- move_line_y[1]
for (k in c(1:4)){
u <- u + direction$x[k]
v <- v + direction$y[k]
if ((u>0) && (v>0) && (u<=m) && (v<=n) && (track_path[u,v] == TRUE)){
move_line_x <- c(move_line_x,u)
move_line_y <- c(move_line_y,v)
track_path[u,v] = FALSE
u <- u - direction$x[k]
v <- v - direction$y[k]
}
}
move_line_x <- move_line_x[-1]
move_line_y <- move_line_y[-1]
}
for (i in endRegion$x){
for (j in endRegion$y){
if (track_path[i,j] == FALSE && d0[i,j] == TRUE) return(TRUE)
}
}
return(FALSE)
}
debug(fun = pathQ)
pathQ(d0, startPoint = startPoint, endRegion = endPosition)
pathQ <- function(maze, startPoint, endRegion){
direction <- list(x = c(-1,1,0,0), y = c(0,0,-1,1))
track_path <- d0
move_line_x <- c()
move_line_y <- c()
m <- dim(d0)[1]
n <- dim(d0)[2]
u <- startPoint$x
v <- startPoint$y
track_path[u,v] <- FALSE
move_line_x <- c(move_line_x, u)
move_line_y <- c(move_line_y, v)
while (length(move_line_x) > 0){
u <- move_line_x[1]
v <- move_line_y[1]
for (k in c(1:4)){
u <- u + direction$x[k]
v <- v + direction$y[k]
if ((u>0) && (v>0) && (u<=m) && (v<=n) && (track_path[u,v] == TRUE)){
move_line_x <- c(move_line_x,u)
move_line_y <- c(move_line_y,v)
track_path[u,v] = FALSE
u <- u - direction$x[k]
v <- v - direction$y[k]
} else {
u <- u - direction$x[k]
v <- v - direction$y[k]
}
}
move_line_x <- move_line_x[-1]
move_line_y <- move_line_y[-1]
}
for (i in endRegion$x){
for (j in endRegion$y){
if (track_path[i,j] == FALSE && d0[i,j] == TRUE) return(TRUE)
}
}
return(FALSE)
}
debug(fun = pathQ)
pathQ(d0, startPoint = startPoint, endRegion = endPosition)
pathQ <- function(maze, startPoint, endRegion){
direction <- list(x = c(-1,1,0,0), y = c(0,0,-1,1))
track_path <- d0
move_line_x <- c()
move_line_y <- c()
m <- dim(d0)[1]
n <- dim(d0)[2]
u <- startPoint$x
v <- startPoint$y
track_path[u,v] <- FALSE
move_line_x <- c(move_line_x, u)
move_line_y <- c(move_line_y, v)
while (length(move_line_x) > 0){
u <- move_line_x[1]
v <- move_line_y[1]
for (k in c(1:4)){
u <- u + direction$x[k]
v <- v + direction$y[k]
if ((u>0) && (v>0) && (u<=m) && (v<=n) && (track_path[u,v] == TRUE)){
move_line_x <- c(move_line_x,u)
move_line_y <- c(move_line_y,v)
track_path[u,v] = FALSE
u <- u - direction$x[k]
v <- v - direction$y[k]
} else {
u <- u - direction$x[k]
v <- v - direction$y[k]
}
}
move_line_x <- move_line_x[-1]
move_line_y <- move_line_y[-1]
}
for (i in endRegion$x){
for (j in endRegion$y){
if (track_path[i,j] == FALSE && d0[i,j] == TRUE) return(TRUE)
}
}
return(FALSE)
}
pathQ(d0, startPoint = startPoint, endRegion = endPosition)
start_time <- Sys.time()
pathQ(d0, startPoint = startPoint, endRegion = endPosition)
end_time <- Sys.time()
end_time - start_time
game <- list(
"player1" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2)),
"player2" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2)),
"player3" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2))
)
getAllPureStrategyNE <- function(game_var){
# Initial for data processing
game_index <- list()
n_player <- length(game_var)
n_action <- dim(game_var[[1]])
# Create action profile for each player
for (i in (1 : n_player)){
d <- dim(game_var[[i]])[i]
game_index <- c(game_index, list(array(1:d)))
}
profiles <- expand.grid(game_index)
names(profiles) <- names(game_var)
# Create amount profile for each player
profiles_amt <- data.frame(as.vector(game_var[[1]]))
for (i in (2 : n_player)) {
profiles_amt <- cbind(profiles_amt, as.vector(game_var[[i]]))
}
names(profiles_amt) <- names(profiles)
# Initial for nash equi calculating
total_action <- dim(profiles)[1]
nash_equi <- matrix(FALSE, nrow = total_action, ncol = n_player)
# Nash equilibrium calculating - Highlight for the best move that not depend on other player's move
for (i in (1 : n_player)){
for (j in (1 : n_action[i])){
action_list <- c()
for (k in (1 : total_action)){
if (profiles[k,i] == j) {
action_list <- c(action_list, profiles_amt[k,i])
}
}
best_move <- max(action_list)
for (k in (1 : total_action)){
if ((profiles[k,i] == j) && (profiles_amt[k,i] == best_move)){
nash_equi[k,i] = TRUE
}
}
}
}
# Initial for get data
n = dim(nash_equi)[1]
m = dim(nash_equi)[2]
result_nash = list()
name_res = c()
tmp = c()
# Nash equilibrium get result
for (i in (1 : n)){
flag = 1
for (j in (1 : m)){
if (nash_equi[i,j] == FALSE) flag = 0
}
if (flag == 1){ # If action is highlight for all player
name_res <- c(name_res, paste(profiles[i,], collapse = ''))
tmp = c()
for (j in (1 : m)){
tmp <- c(tmp, profiles[i,j])
}
result_nash <- c(result_nash, list(tmp))
}
}
names(result_nash) <- name_res
return(result_nash)
}
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(0, 1, 1, 1, 1, 1, 1, 0), dim = c(2, 2, 2)),
"player2" = array(c(0, 1, 1, 1, 1, 1, 1, 0), dim = c(2, 2, 2)),
"player3" = array(c(0, 1, 1, 1, 1, 1, 1, 0), dim = c(2, 2, 2))
)
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2, 2)),
"player2" = array(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2, 2)),
"player3" = array(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2, 2)),
"player4" = array(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2, 2))
)
getAllPureStrategyNE(game)
par(mfrow=c(2, 2), mar=c(4, 4, 1, 1))
y <- rnorm(20)
plot(y, type="p")
plot(y, type="l")
plot(y, type="b")
plot(y, type="h")
plot((1:10)^2,xlim=c(0, 11), ylim=c(0, 110))
a<-table(rep(1:3, 1:3))
b<-rep(1:3)
plot(b,lwd=3, xlim=c(0, 4), ylim=c(0, 4))
plot(a,lwd=3, xlim=c(0, 4), ylim=c(0, 4))
barplot(table(rep(1:3, 1:3)),xlim=c(-1, 5), ylim=c(0, 4),col = "grey")
pie(c(1, 2, 3), col=gray(1:3/4))
dotchart(1:4, pch=21, bg="gray", lcolor="black", xlim=c(0, 4))
boxplot((1:10)^2, col="gray", ylim=c(-10, 110))
hist((1:100)^2, col="gray", breaks=6, xlim=c(-1000, 11000), ylim=c(0, 50))
plot(1:10, (1:10)^2, pch=21, bg="gray", xlim=c(0,11), ylim=c(-10, 110))
x <- rnorm(10000)
smoothScatter(x, x + rnorm(10000)/3,xlim=c(-5, 5), ylim=c(-5, 5))
plot(1:10, (1:10)^2, pch=21, bg="gray", xlim=c(0,11), ylim=c(-10, 110))
x <- rnorm(10000)
smoothScatter(x, x + rnorm(10000)/3,xlim=c(-5, 5), ylim=c(-5, 5))
sunflowerplot(iris[, 3:4])
x <- sample(1:4, 20, replace=TRUE)
y <- x + sample(0:1, 20, replace=TRUE)
sunflowerplot(x, y,seg.col="black", size=.08, xlim=c(0, 5), ylim=c(0, 6))
boxplot(list((1:10)^2, 120 - (1:10)^2), col="gray", boxwex=0.5,ylim=c(-10, 130))
barplot(rbind(1:3,(1:3)^2),xlim=c(0, 4), ylim=c(0, 13))
barplot(rbind(1:3, (1:3)^2),beside=TRUE,xlim=c(0, 10), ylim=c(0, 11))
stripchart(list((1:10)^2, 140 - (1:10)^2),xlim=c(-10, 150), ylim=c(0, 3), pch=21, bg="gray")
spineplot(rep(1:3, each=6), factor(c(rep(1:3, 3:1), rep(1:3, 2), rep(1:3, 1:3))), box=FALSE)
cdplot(rep(1:3, each=6), factor(c(rep(1:3, 3:1), rep(1:3, 2), rep(1:3, 1:3))), box=FALSE)
cdplot(rep(1:3, each=6), factor(c(rep(1:3, 3:1), rep(1:3, 2), rep(1:3, 1:3))), box=FALSE)
spineplot(factor(rep(1:3, each=6)), factor(c(rep(1:3, 3:1), rep(1:3, 2), rep(1:3, 1:3))))
x <- margin.table(HairEyeColor, c(1, 2))
assocplot(x, main = "Relation between hair and eye color")
library(dplyr)
vehicles <- read.csv('http://jolej.linuxpl.info/vehicles.csv')
summary(vehicles)
select(vehicles, class)
table(select(vehicles, class))
vehicles$class<-factor(vehicles$class)
boxplot(vehicles$co2emissions~vehicles$class)
plot(vehicles$citympg~vehicles$co2emissions)
hist(vehicles$co2emissions, breaks=30)
vehicles$drive<-factor(vehicles$drive)
dr<-table(vehicles$drive)
pie(dr)
pie(dr,labels = paste0(round(100 * dr/sum(dr), 2), "%"),col=c("white", "lightblue", "mistyrose", "blue","red"))
legend("topleft",legend=names(dr), fill=c("white", "lightblue", "mistyrose", "blue","red"))
cl<-table(vehicles$class)
pie(cl)
plot(cars)
if (requireNamespace("thematic"))
thematic::thematic_rmd(font = "auto")
library(ggplot2)
ggplot(mpg, aes(displ, hwy)) +
geom_point() + geom_smooth()
lattice::show.settings()
plot(pressure, col = thematic::thematic_get_option("accent"))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
integrate3d <- function(f, over, n){
x <- seq(from = over$x[[1]], to = over$x[[2]], length.out = if (n > 10^4) {10^4} else {n})
y <- seq(from = over$y[[1]], to = over$y[[2]], length.out = if (n > 10^4) {10^4} else {n})
x1 <- sample(x, size = n, replace = TRUE)
y1 <- sample(y, size = n, replace = TRUE)
z_actual <- f(x1,y1)
z_min <- min(z_actual)
z_min <- min(z_min, over$x[[1]], over$y[[1]])
z_max <- max(z_actual)
z_max <- max(z_max, over$x[[2]], over$y[[2]])
z <- seq(from = z_min, to = z_max, length.out = if (n > 10^4) {10^4} else {n})
z1 <- sample(z, size = n, replace = TRUE)
z_actual <- z_actual - z1
result <- length(z_actual[z_actual >= 0])
return(result / n * (over$x[[2]] - over$x[[1]]) * (over$y[[2]] - over$y[[1]]) * (z_max - z_min))
}
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
print(paste(as.character(file.size())))
print(f(1))
for (f in list(sin, cos, log, exp)) {
print(f(1))
}
cond <- x >0
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
cond <- TRUE
while (cond){
x <- rnorm(1, mean = 1.3)
print(x)
cond <- x >0
}
print(i)
for (i in 1:5){
if (i == 3) break
print(i)
}
getwd()
dir()
names(dir())
a<-dir()
a
a[1]
dir.exists(path =dirDataName)
dir.exists(path =dirDataName)
dirDataName <- "./data"
dir.exists(path =dirDataName)
if (!dir.exists(path =dirDataName)){
dir.create(path = dirDataName)
}
setwd(dirDataName)
getwd()
setwd(dirDataName)
setwd(initial_wd)
initial_wd <- getwd()
setwd(initial_wd)
initial_wd <- getwd()
dirDataName <- "./data"
numberofFiles <- 100
numberofNumbers <- 10
if (!dir.exists(path =dirDataName)){
dir.create(path = dirDataName)
}
for (i in numberofFiles){
fileName <- paste0("data_", as.character(i),".csv")
d <- data.frame(value = rnorm(numberofNumbers))
write.csv(d, fileName)
}
setwd(initial_wd)
initial_wd <- getwd()
dirDataName <- "./data"
numberofFiles <- 100
numberofNumbers <- 10
if (!dir.exists(path =dirDataName)){
dir.create(path = dirDataName)
}
setwd(dirDataName)
for (i in 1:numberofFiles){
fileName <- paste0("data_", as.character(i),".csv")
d <- data.frame(value = rnorm(numberofNumbers))
write.csv(d, fileName)
}
setwd(initial_wd)
list.files()
dir(path = dirDataName, pattern = "csv$")
dirDataName <- "./data"
numberofFiles <- 100
numberofNumbers <- 10
files <- dir(path = dirDataName, pattern = "csv$", full.names = TRUE)
v <- c()
for (f in length(files)){
v <- c(v, read.csv(file = f)$value)
}
for (f in files){
v <- c(v, read.csv(file = f)$value)
}
hist(x = v, density = 20, angle = -45, col = "red", probability = TRUE, breaks ="Scott")
