names(profiles) <- names(game_var)
# Create amount profile for each player
profiles_amt <- data.frame(as.vector(game_var[[1]]))
for (i in (2 : n_player)) {
profiles_amt <- cbind(profiles_amt, as.vector(game_var[[i]]))
}
names(profiles_amt) <- names(profiles)
# Initial for nash equi calculating
total_action <- dim(profiles)[1]
nash_equi <- matrix(TRUE, nrow = total_action, ncol = n_player)
for (i in 1:n_player){
for (j in 1:total_action){
for (k in 1:n_player){
if (i != k) {
for (h in 1:n_action[k]){
if (h != profiles[j,k]) {
action <- Action_Search(j, h, profiles, k, total_action, n_player)
if (profiles_amt[j,k] < profiles_amt[action,k]){
nash_equi[j,i] = FALSE
break
}
}
}
}
if (nash_equi[j,i] == FALSE) break
}
}
}
# Initial for get data
n = dim(nash_equi)[1]
m = dim(nash_equi)[2]
result_nash = list()
name_res = c()
tmp = c()
# Nash equilibrium get result
for (i in (1 : n)){
flag = 1
for (j in (1 : m)){
if (nash_equi[i,j] == FALSE) flag = 0
}
if (flag == 1){ # If action is highlight for all player
name_res <- c(name_res, paste(profiles[i,], collapse = ''))
tmp = c()
for (j in (1 : m)){
tmp <- c(tmp, profiles[i,j])
}
result_nash <- c(result_nash, list(tmp))
}
}
names(result_nash) <- name_res
return(result_nash)
}
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(5, 10, 1, 2), dim = c(2, 2)),
"player2" = array(c(5, 1, 10, 2), dim = c(2, 2))
)
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(3, 2, 0, 2), dim = c(2, 2)),
"player2" = array(c(3, 0, 2, 2), dim = c(2, 2))
)
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(0, 1, 1, 0), dim = c(2, 2)),
"player2" = array(c(0, 1, 1, 0), dim = c(2, 2))
)
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(0, 1, 1, 1, 1, 1, 1, 0), dim = c(2, 2, 2)),
"player2" = array(c(0, 1, 1, 1, 1, 1, 1, 0), dim = c(2, 2, 2)),
"player3" = array(c(0, 1, 1, 1, 1, 1, 1, 0), dim = c(2, 2, 2))
)
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2)),
"player2" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2)),
"player3" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2))
)
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2)),
"player2" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2)),
"player3" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2))
)
Action_Search <- function(current_step, new_flip, action_profiles, current_player, action_total, n_player){
current_action_profiles <- c()
for (e in 1:n_player){
current_action_profiles <- c(current_action_profiles, action_profiles[current_step, e])
}
current_action_profiles[current_player] <- new_flip
for (e in 1:action_total){
tmp <- c()
for (f in 1:n_player){
tmp <- c(tmp, action_profiles[e,f])
}
if (sum(tmp == current_action_profiles) == n_player) {
return(e)
}
}
}
getAllPureStrategyNE <- function(game_var){
# Initial for data processing
game_index <- list()
n_player <- length(game_var)
n_action <- dim(game_var[[1]])
# Create action profile for each player
for (i in (1 : n_player)){
d <- dim(game_var[[i]])[i]
game_index <- c(game_index, list(array(1:d)))
}
profiles <- expand.grid(game_index)
names(profiles) <- names(game_var)
# Create amount profile for each player
profiles_amt <- data.frame(as.vector(game_var[[1]]))
for (i in (2 : n_player)) {
profiles_amt <- cbind(profiles_amt, as.vector(game_var[[i]]))
}
names(profiles_amt) <- names(profiles)
# Initial for nash equi calculating
total_action <- dim(profiles)[1]
nash_equi <- matrix(TRUE, nrow = total_action, ncol = n_player)
for (i in 1:n_player){
for (j in 1:total_action){
for (k in 1:n_player){
if (i != k) {
for (h in 1:n_action[k]){
if (h != profiles[j,k]) {
action <- Action_Search(j, h, profiles, k, total_action, n_player)
if (profiles_amt[j,k] < profiles_amt[action,k]){
nash_equi[j,i] = FALSE
break
}
}
}
}
if (nash_equi[j,i] == FALSE) break
}
}
}
# Initial for get data
n = dim(nash_equi)[1]
m = dim(nash_equi)[2]
result_nash = list()
name_res = c()
tmp = c()
# Nash equilibrium get result
for (i in (1 : n)){
flag = 1
for (j in (1 : m)){
if (nash_equi[i,j] == FALSE) flag = 0
}
if (flag == 1){ # If action is highlight for all player
name_res <- c(name_res, paste(profiles[i,], collapse = ''))
tmp = c()
for (j in (1 : m)){
tmp <- c(tmp, profiles[i,j])
}
result_nash <- c(result_nash, list(tmp))
}
}
names(result_nash) <- name_res
return(result_nash)
}
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(3, 2, 0, 2), dim = c(2, 2)),
"player2" = array(c(3, 0, 2, 2), dim = c(2, 2))
)
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(0, 1, 1, 1, 1, 1, 1, 0), dim = c(2, 2, 2)),
"player2" = array(c(0, 1, 1, 1, 1, 1, 1, 0), dim = c(2, 2, 2)),
"player3" = array(c(0, 1, 1, 1, 1, 1, 1, 0), dim = c(2, 2, 2))
)
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2)),
"player2" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2)),
"player3" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2))
)
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2, 2)),
"player2" = array(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2, 2)),
"player3" = array(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2, 2)),
"player4" = array(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2, 2))
)
getAllPureStrategyNE(game)
integrate3d <- function(f, over, n){
x <- seq(from = over$x[[1]], to = over$x[[2]], length.out = if (n > 10^4) {10^4} else {n})
y <- seq(from = over$y[[1]], to = over$y[[2]], length.out = if (n > 10^4) {10^4} else {n})
x1 <- sample(x, size = n, replace = TRUE)
y1 <- sample(y, size = n, replace = TRUE)
z_actual <- f(x1,y1)
z_min <- min(z_actual)
z_min <- min(z_min, over$x[[1]], over$y[[1]])
z_max <- max(z_actual)
z_max <- max(z_max, over$x[[2]], over$y[[2]])
z <- seq(from = z_min, to = z_max, length.out = if (n > 10^4) {10^4} else {n})
z1 <- sample(z, size = n, replace = TRUE)
z_actual <- z_actual - z1
result <- length(z_actual[z_actual >= 0])
return(result / n * (over$x[[2]] - over$x[[1]]) * (over$y[[2]] - over$y[[1]]) * (z_max - z_min))
}
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
)
test <- c()
for (i in 1:1000){
test <- c(test,integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
))
}
start_time <-Sys.time()
test <- c()
for (i in 1:1000){
test <- c(test,integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
))
}
end_time <-Sys.time()
print(end_time - start_time)
summary(test)
hist(test)
start_time <-Sys.time()
test <- c()
for (i in 1:100){
test <- c(test,integrate3d(f = function(x, y) {cos(x) * y},
over = list(x = c(0, pi / 2), y = c(0, 1)),
n = 10^5
))
}
end_time <-Sys.time()
print(end_time - start_time)
summary(test)
hist(test)
start_time <-Sys.time()
test <- c()
for (i in 1:100){
test <- c(test,integrate3d(
f = function(x, y) { (cos(x) + 2) * (sin(y) + 1)},
over = list(x = c(0, pi), y = c(0, pi)),
n = 10^5))
}
end_time <-Sys.time()
print(end_time - start_time)
summary(test)
hist(test)
test
# Reading in the maze
d0 <- readRDS(file = "./maze.RDS")
# Finding Path
endPosition  <- list(x = 220:230, y = 325:335)
startPoint <- list(x = 1, y =1)
pathQ <- function(maze, startPoint, endRegion){
direction <- list(x = c(-1,1,0,0), y = c(0,0,-1,1))
track_path <- d0
move_line_x <- c()
move_line_y <- c()
m <- dim(d0)[1]
n <- dim(d0)[2]
u <- startPoint$x
v <- startPoint$y
track_path[u,v] <- FALSE
move_line_x <- c(move_line_x, u)
move_line_y <- c(move_line_y, v)
while (length(move_line_x) > 0){
u <- move_line_x[1]
v <- move_line_y[1]
for (k in c(1:4)){
u <- u + direction$x[k]
v <- v + direction$y[k]
if ((u>0) && (v>0) && (u<=m) && (v<=n) && (track_path[u,v] == TRUE)){
move_line_x <- c(move_line_x,u)
move_line_y <- c(move_line_y,v)
track_path[u,v] = FALSE
u <- u - direction$x[k]
v <- v - direction$y[k]
} else {
u <- u - direction$x[k]
v <- v - direction$y[k]
}
}
move_line_x <- move_line_x[-1]
move_line_y <- move_line_y[-1]
}
for (i in endRegion$x){
for (j in endRegion$y){
if (track_path[i,j] == FALSE && d0[i,j] == TRUE) return(TRUE)
}
}
return(FALSE)
}
pathQ(d0, startPoint = startPoint, endRegion = endPosition)
game <- list(
"player1" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2)),
"player2" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2)),
"player3" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2))
)
Action_Search <- function(current_step, new_flip, action_profiles, current_player, action_total, n_player){
current_action_profiles <- c()
for (e in 1:n_player){
current_action_profiles <- c(current_action_profiles, action_profiles[current_step, e])
}
current_action_profiles[current_player] <- new_flip
for (e in 1:action_total){
tmp <- c()
for (f in 1:n_player){
tmp <- c(tmp, action_profiles[e,f])
}
if (sum(tmp == current_action_profiles) == n_player) {
return(e)
}
}
}
getAllPureStrategyNE <- function(game_var){
# Initial for data processing
game_index <- list()
n_player <- length(game_var)
n_action <- dim(game_var[[1]])
# Create action profile for each player
for (i in (1 : n_player)){
d <- dim(game_var[[i]])[i]
game_index <- c(game_index, list(array(1:d)))
}
profiles <- expand.grid(game_index)
names(profiles) <- names(game_var)
# Create amount profile for each player
profiles_amt <- data.frame(as.vector(game_var[[1]]))
for (i in (2 : n_player)) {
profiles_amt <- cbind(profiles_amt, as.vector(game_var[[i]]))
}
names(profiles_amt) <- names(profiles)
# Initial for nash equi calculating
total_action <- dim(profiles)[1]
nash_equi <- matrix(TRUE, nrow = total_action, ncol = n_player)
for (i in 1:n_player){
for (j in 1:total_action){
for (k in 1:n_player){
if (i != k) {
for (h in 1:n_action[k]){
if (h != profiles[j,k]) {
action <- Action_Search(j, h, profiles, k, total_action, n_player)
if (profiles_amt[j,k] < profiles_amt[action,k]){
nash_equi[j,i] = FALSE
break
}
}
}
}
if (nash_equi[j,i] == FALSE) break
}
}
}
# Initial for get data
n = dim(nash_equi)[1]
m = dim(nash_equi)[2]
result_nash = list()
name_res = c()
tmp = c()
# Nash equilibrium get result
for (i in (1 : n)){
flag = 1
for (j in (1 : m)){
if (nash_equi[i,j] == FALSE) flag = 0
}
if (flag == 1){ # If action is highlight for all player
name_res <- c(name_res, paste(profiles[i,], collapse = ''))
tmp = c()
for (j in (1 : m)){
tmp <- c(tmp, profiles[i,j])
}
result_nash <- c(result_nash, list(tmp))
}
}
names(result_nash) <- name_res
return(result_nash)
}
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2, 2)),
"player2" = array(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2, 2)),
"player3" = array(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2, 2)),
"player4" = array(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2, 2))
)
getAllPureStrategyNE(game)
game <- list(
"player1" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2)),
"player2" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2)),
"player3" = array(c(1, 0, 0, 0, 0, 0, 0, 1), dim = c(2, 2, 2))
)
getAllPureStrategyNE <- function(game_var){
Action_Search <- function(current_step, new_flip, action_profiles, current_player, action_total, n_player){
current_action_profiles <- c()
for (e in 1:n_player){
current_action_profiles <- c(current_action_profiles, action_profiles[current_step, e])
}
current_action_profiles[current_player] <- new_flip
for (e in 1:action_total){
tmp <- c()
for (f in 1:n_player){
tmp <- c(tmp, action_profiles[e,f])
}
if (sum(tmp == current_action_profiles) == n_player) {
return(e)
}
}
}
# Initial for data processing
game_index <- list()
n_player <- length(game_var)
n_action <- dim(game_var[[1]])
# Create action profile for each player
for (i in (1 : n_player)){
d <- dim(game_var[[i]])[i]
game_index <- c(game_index, list(array(1:d)))
}
profiles <- expand.grid(game_index)
names(profiles) <- names(game_var)
# Create amount profile for each player
profiles_amt <- data.frame(as.vector(game_var[[1]]))
for (i in (2 : n_player)) {
profiles_amt <- cbind(profiles_amt, as.vector(game_var[[i]]))
}
names(profiles_amt) <- names(profiles)
# Initial for nash equi calculating
total_action <- dim(profiles)[1]
nash_equi <- matrix(TRUE, nrow = total_action, ncol = n_player)
for (i in 1:n_player){
for (j in 1:total_action){
for (k in 1:n_player){
if (i != k) {
for (h in 1:n_action[k]){
if (h != profiles[j,k]) {
action <- Action_Search(j, h, profiles, k, total_action, n_player)
if (profiles_amt[j,k] < profiles_amt[action,k]){
nash_equi[j,i] = FALSE
break
}
}
}
}
if (nash_equi[j,i] == FALSE) break
}
}
}
# Initial for get data
n = dim(nash_equi)[1]
m = dim(nash_equi)[2]
result_nash = list()
name_res = c()
tmp = c()
# Nash equilibrium get result
for (i in (1 : n)){
flag = 1
for (j in (1 : m)){
if (nash_equi[i,j] == FALSE) flag = 0
}
if (flag == 1){ # If action is highlight for all player
name_res <- c(name_res, paste(profiles[i,], collapse = ''))
tmp = c()
for (j in (1 : m)){
tmp <- c(tmp, profiles[i,j])
}
result_nash <- c(result_nash, list(tmp))
}
}
names(result_nash) <- name_res
return(result_nash)
}
getAllPureStrategyNE(game)
library(dplyr)
mylist <- list(1,2,"C",3,5)
unlist(mylist)
ls(pat="^V")
ls(pat="^V")
df1 < data.frame(VarA = c(1,4,7), VarB = c(3,5,8))
df1 <- data.frame(VarA = c(1,4,7), VarB = c(3,5,8))
df1
lenght(df1)
length(df1)
a <- c(-2,-1,0)
as.logical(a)
x<-NA
y<- x/1
y
ls()
10%%3
